diff -Naur a/CMakeModules/FindROOT.cmake b/CMakeModules/FindROOT.cmake
--- a/CMakeModules/FindROOT.cmake	2014-01-15 13:18:45.000000000 +0100
+++ b/CMakeModules/FindROOT.cmake	2014-01-15 20:41:17.000000000 +0100
@@ -215,21 +215,21 @@
 
 
 
-
-    # ====== DL LIBRARY ==================================================
-    # workaround for cmake bug in 64 bit:
-    # see: http://public.kitware.com/mantis/view.php?id=10813
-    IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
-        FIND_LIBRARY( DL_LIB NAMES ${CMAKE_DL_LIBS} dl PATHS /usr/lib64 /lib64 NO_DEFAULT_PATH )
-    ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
-
-    FIND_LIBRARY( DL_LIB NAMES ${CMAKE_DL_LIBS} dl )
-    MARK_AS_ADVANCED( DL_LIB )
-
-    IF( NOT ROOT_FIND_QUIETLY )
-        MESSAGE( STATUS "Check for libdl.so: ${DL_LIB}" )
-    ENDIF()
-
+    IF(!APPLE)
+      # ====== DL LIBRARY ==================================================
+      # workaround for cmake bug in 64 bit:
+      # see: http://public.kitware.com/mantis/view.php?id=10813
+      IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
+          FIND_LIBRARY( DL_LIB NAMES ${CMAKE_DL_LIBS} dl PATHS /usr/lib64 /lib64 NO_DEFAULT_PATH )
+      ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
+
+      FIND_LIBRARY( DL_LIB NAMES ${CMAKE_DL_LIBS} dl )
+      MARK_AS_ADVANCED( DL_LIB )
+    
+      IF( NOT ROOT_FIND_QUIETLY )
+          MESSAGE( STATUS "Check for libdl.so: ${DL_LIB}" )
+      ENDIF()
+    ENDIF(!APPLE)
 ENDIF( ROOT_CONFIG_EXECUTABLE )
 
 # Threads library
@@ -240,11 +240,17 @@
 INCLUDE( FindPackageHandleStandardArgs )
 # set ROOT_FOUND to TRUE if all listed variables are TRUE and not empty
 # ROOT_COMPONENT_VARIABLES will be set if FIND_PACKAGE is called with REQUIRED argument
-FIND_PACKAGE_HANDLE_STANDARD_ARGS( ROOT DEFAULT_MSG ROOT_INCLUDE_DIRS ROOT_LIBRARIES ${ROOT_COMPONENT_VARIABLES} PACKAGE_VERSION_COMPATIBLE DL_LIB )
+IF(APPLE)
+  FIND_PACKAGE_HANDLE_STANDARD_ARGS( ROOT DEFAULT_MSG ROOT_INCLUDE_DIRS ROOT_LIBRARIES ${ROOT_COMPONENT_VARIABLES} PACKAGE_VERSION_COMPATIBLE )
+ELSE(APPLE)
+  FIND_PACKAGE_HANDLE_STANDARD_ARGS( ROOT DEFAULT_MSG ROOT_INCLUDE_DIRS ROOT_LIBRARIES ${ROOT_COMPONENT_VARIABLES} PACKAGE_VERSION_COMPATIBLE DL_LIB )
+ENDIF(APPLE)
 
-IF( ROOT_FOUND )
-    LIST( APPEND ROOT_LIBRARIES ${DL_LIB} )
 
+IF( ROOT_FOUND )
+    IF(!APPLE )
+      LIST( APPEND ROOT_LIBRARIES ${DL_LIB} )
+    ENDIF(!APPLE)
     # file including MACROS for generating root dictionary sources
     GET_FILENAME_COMPONENT( _aux ${CMAKE_CURRENT_LIST_FILE} PATH )
     SET( ROOT_DICT_MACROS_FILE ${_aux}/MacroRootDict.cmake )
